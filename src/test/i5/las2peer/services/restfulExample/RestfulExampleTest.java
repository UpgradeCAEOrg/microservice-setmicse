package i5.las2peer.services.restfulExample;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.util.HashMap;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import javax.ws.rs.core.MediaType;

import i5.las2peer.p2p.LocalNode;
import i5.las2peer.p2p.LocalNodeManager;
import i5.las2peer.api.p2p.ServiceNameVersion;
import i5.las2peer.security.ServiceAgentImpl;
import i5.las2peer.security.UserAgentImpl;
import i5.las2peer.testing.MockAgentFactory;
import i5.las2peer.connectors.webConnector.WebConnector;
import i5.las2peer.connectors.webConnector.client.ClientResponse;
import i5.las2peer.connectors.webConnector.client.MiniClient;
import org.json.simple.JSONObject;
import org.json.simple.JSONValue;


/**
 *
 * setmicse - Test Class
 *
 * This class provides a basic testing framework for the microservice setmicse. It was
 * generated by the CAE (Community Application Framework).
 *
 */
public class RestfulExampleTest {

  private static final String HTTP_ADDRESS = "http://127.0.0.1";
  private static final int HTTP_PORT = WebConnector.DEFAULT_HTTP_PORT;

  private static LocalNode node;
  private static WebConnector connector;
  private static ByteArrayOutputStream logStream;

  private static UserAgentImpl testAgent;
  private static final String testPass = "adamspass";

  // version does not matter in tests
  private static final ServiceNameVersion testTemplateService = new ServiceNameVersion(RestfulExample.class.getCanonicalName(),"0.1");

  private static final String mainPath = "RestfulExample";


  /**
   *
   * Called before the tests start.
   *
   * Sets up the node and initializes connector and users that can be used throughout the tests.
   *
   * @throws Exception
   *
   */
  @BeforeClass
  public static void startServer() throws Exception {

    // start node
	node = new LocalNodeManager().newNode();
    testAgent = MockAgentFactory.getAdam();
    testAgent.unlock(testPass); // agent must be unlocked in order to be stored
    node.storeAgent(testAgent);
    node.launch();

    ServiceAgentImpl testService = ServiceAgentImpl.createServiceAgent(testTemplateService, "a pass");
    testService.unlock("a pass");

    node.registerReceiver(testService);

    // start connector
    logStream = new ByteArrayOutputStream();

    connector = new WebConnector(true, HTTP_PORT, false, 1000);
    connector.setLogStream(new PrintStream(logStream));
    connector.start(node);
    Thread.sleep(1000); // wait a second for the connector to become ready
    testAgent = MockAgentFactory.getAdam();
    
     
  }


  /**
   * 
   * Test for the postTrack method.
   * 
   */
  @Test
  public void testpostTrack() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      JSONObject trackId = new JSONObject();
      c.setLogin(testAgent.getIdentifier(), testPass);
      ClientResponse result = c.sendRequest("POST", mainPath + "/postTrack", trackId.toJSONString(),
        MediaType.APPLICATION_JSON, MediaType.APPLICATION_JSON, new HashMap<String,String>());
      assertTrue(true); // change here
      System.out.println("Result of 'testpostTrack': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }

  /**
   * 
   * Test for the getTrack method.
   * 
   */
  @Test
  public void testgetTrack() {
    MiniClient c = new MiniClient();
    c.setAddressPort(HTTP_ADDRESS, HTTP_PORT);
    try {
      String trackId = "initialized";
      c.setLogin(testAgent.getIdentifier(), testPass);
      ClientResponse result = c.sendRequest("GET", mainPath + "/getTrack/{trackId}", "",
        MediaType.TEXT_PLAIN, MediaType.APPLICATION_JSON, new HashMap<String,String>());
      assertTrue(true); // change here
      System.out.println("Result of 'testgetTrack': " + result.getResponse().trim());
    } catch (Exception e) {
      e.printStackTrace();
      fail("Exception: " + e);
    }
  }





  /**
   *
   * Called after the tests have finished. Shuts down the server and prints out the connector log
   * file for reference.
   *
   * @throws Exception
   *
   */
  @AfterClass
  public static void shutDownServer() throws Exception {
	
	 

    connector.stop();
    node.shutDown();

    connector = null;
    node = null;

    System.out.println("Connector-Log:");
    System.out.println("--------------");

    System.out.println(logStream.toString());

  }

}
